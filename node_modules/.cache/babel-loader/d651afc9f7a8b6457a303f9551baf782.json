{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/gwc/Desktop/s-robinhood/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport './stockView';\nimport StockView from './stockView';\n\nfunction App() {\n  _s();\n\n  //create state that holds ticker data\n  const [tickers, setTickers] = useState([{\n    name: 'GOOG',\n    price: 5.10\n  }, {\n    name: 'AAPL',\n    price: 8.53\n  }, {\n    name: 'AMZN',\n    price: 10.40\n  }, {\n    name: 'TWTR',\n    price: 4.05\n  }, {\n    name: 'JPM',\n    price: 3.52\n  }]);\n\n  function changePrice(original) {\n    const possiblePrice = [original + 0.05 * original, original - 0.05 * original];\n    return possiblePrice[Math.floor(Math.random() * 2)];\n  }\n\n  const tickerView = tickers.map(ticker => /*#__PURE__*/_jsxDEV(StockView, {\n    name: ticker.name,\n    price: ticker.price\n  }, ticker.name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this));\n  useEffect(() => {\n    setTickers();\n  }), [tickers];\n\n  const updateFieldChanged = () => {\n    let newArr = [...tickers]; // copying the old tickers array\n\n    newArr.price = changePrice(newArr.price);\n    setTickers(newArr);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [tickerView, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: tickers.map(ticker => {\n        updateFieldChanged;\n      }),\n      children: \"click to refresh price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"GxSjjwQUEhV1xZiIhKgC6CMbkeM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/gwc/Desktop/s-robinhood/src/App.js"],"names":["React","useState","useEffect","StockView","App","tickers","setTickers","name","price","changePrice","original","possiblePrice","Math","floor","random","tickerView","map","ticker","updateFieldChanged","newArr"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAiBC,QAAjB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAO,WAAP;AACA,OAAO,aAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,CACrC;AAACM,IAAAA,IAAI,EAAE,MAAP;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GADqC,EAErC;AAACD,IAAAA,IAAI,EAAE,MAAP;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAFqC,EAGrC;AAACD,IAAAA,IAAI,EAAE,MAAP;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAHqC,EAIrC;AAACD,IAAAA,IAAI,EAAE,MAAP;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAJqC,EAKrC;AAACD,IAAAA,IAAI,EAAE,KAAP;AAAcC,IAAAA,KAAK,EAAE;AAArB,GALqC,CAAD,CAAtC;;AAQA,WAASC,WAAT,CAAqBC,QAArB,EAA8B;AAC5B,UAAMC,aAAa,GAAG,CAACD,QAAQ,GAAC,OAAKA,QAAf,EAAyBA,QAAQ,GAAC,OAAKA,QAAvC,CAAtB;AACA,WAAOC,aAAa,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAD,CAApB;AACD;;AAED,QAAMC,UAAU,GAAGV,OAAO,CAACW,GAAR,CAAaC,MAAD,iBAC7B,QAAC,SAAD;AAAW,IAAA,IAAI,EAAEA,MAAM,CAACV,IAAxB;AAA8B,IAAA,KAAK,EAAEU,MAAM,CAACT;AAA5C,KAAwDS,MAAM,CAACV,IAA/D;AAAA;AAAA;AAAA;AAAA,UADiB,CAAnB;AAIAL,EAAAA,SAAS,CAAC,MAAI;AACZI,IAAAA,UAAU;AAGX,GAJQ,CAAT,EAIG,CAACD,OAAD,CAJH;;AAMF,QAAMa,kBAAkB,GAAG,MAAM;AAC7B,QAAIC,MAAM,GAAG,CAAC,GAAGd,OAAJ,CAAb,CAD6B,CACF;;AAC3Bc,IAAAA,MAAM,CAACX,KAAP,GAAeC,WAAW,CAACU,MAAM,CAACX,KAAR,CAA1B;AAEAF,IAAAA,UAAU,CAACa,MAAD,CAAV;AACH,GALD;;AAOE,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,eACGJ,UADH,eAEE;AAAQ,MAAA,OAAO,EAAEV,OAAO,CAACW,GAAR,CAAaC,MAAD,IAAW;AAACC,QAAAA,kBAAkB;AAAC,OAA3C,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAtCQd,G;;KAAAA,G;AAwCT,eAAeA,GAAf","sourcesContent":["import React,  { useState, useEffect } from 'react';\nimport './App.css';\nimport './stockView';\nimport StockView from './stockView';\n\n\nfunction App() {\n  //create state that holds ticker data\n  const [tickers, setTickers] = useState([\n    {name: 'GOOG', price: 5.10},\n    {name: 'AAPL', price: 8.53},\n    {name: 'AMZN', price: 10.40},\n    {name: 'TWTR', price: 4.05},\n    {name: 'JPM', price: 3.52},\n   ]);\n\n  function changePrice(original){\n    const possiblePrice = [original+0.05*original, original-0.05*original]\n    return possiblePrice[Math.floor(Math.random() * 2)]\n  }\n\n  const tickerView = tickers.map((ticker)=> \n    <StockView name={ticker.name} price={ticker.price} key={ticker.name}/>\n  ); \n\n  useEffect(()=>{\n    setTickers()\n\n\n  }),[tickers];\n\nconst updateFieldChanged = () => {\n    let newArr = [...tickers]; // copying the old tickers array\n    newArr.price = changePrice(newArr.price); \n\n    setTickers(newArr); \n}\n\n  return (\n    <div className=\"App\">\n      {tickerView}\n      <button onClick={tickers.map((ticker)=> {updateFieldChanged})}>click to refresh price</button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}