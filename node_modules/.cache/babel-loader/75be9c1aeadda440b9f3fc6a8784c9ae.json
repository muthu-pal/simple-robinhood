{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/gwc/Desktop/simple-robinhood/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport './stockView';\nimport StockView from './stockView';\n\nfunction App() {\n  _s();\n\n  //create state that holds ticker data\n  const [tickers, setTickers] = useState([{\n    name: 'GOOG',\n    price: 5.10\n  }, {\n    name: 'AAPL',\n    price: 8.53\n  }, {\n    name: 'AMZN',\n    price: 10.40\n  }, {\n    name: 'TWTR',\n    price: 4.05\n  }, {\n    name: 'JPM',\n    price: 3.52\n  }]);\n\n  function round(value) {\n    return Number(Math.round(value + 'e' + 2) + 'e-' + 2);\n  }\n\n  function changePrice(original) {\n    const possiblePrice = [original + 0.05 * original, original - 0.05 * original];\n    return round(possiblePrice[Math.floor(Math.random() * 2)]);\n  }\n\n  const tickerView = tickers.map(ticker => /*#__PURE__*/_jsxDEV(StockView, {\n    name: ticker.name,\n    price: ticker.price\n  }, ticker.name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this));\n\n  function buttonChange() {\n    let newPrices = tickers.map(ticker => {\n      return { ...ticker,\n        price: changePrice(ticker.price)\n      };\n    });\n    setTickers(newPrices);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [tickerView, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: buttonChange,\n      children: \"click to refresh price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"gIEP9IAG9qCWRJID88y0ob06XLk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/gwc/Desktop/simple-robinhood/src/App.js"],"names":["React","useState","StockView","App","tickers","setTickers","name","price","round","value","Number","Math","changePrice","original","possiblePrice","floor","random","tickerView","map","ticker","buttonChange","newPrices"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAiBC,QAAjB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,OAAO,aAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,CACrC;AAACK,IAAAA,IAAI,EAAE,MAAP;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GADqC,EAErC;AAACD,IAAAA,IAAI,EAAE,MAAP;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAFqC,EAGrC;AAACD,IAAAA,IAAI,EAAE,MAAP;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAHqC,EAIrC;AAACD,IAAAA,IAAI,EAAE,MAAP;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAJqC,EAKrC;AAACD,IAAAA,IAAI,EAAE,KAAP;AAAcC,IAAAA,KAAK,EAAE;AAArB,GALqC,CAAD,CAAtC;;AASA,WAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,WAAOC,MAAM,CAACC,IAAI,CAACH,KAAL,CAAWC,KAAK,GAAC,GAAN,GAAU,CAArB,IAAwB,IAAxB,GAA6B,CAA9B,CAAb;AACA;;AACF,WAASG,WAAT,CAAqBC,QAArB,EAA8B;AAC5B,UAAMC,aAAa,GAAG,CAACD,QAAQ,GAAC,OAAKA,QAAf,EAAyBA,QAAQ,GAAC,OAAKA,QAAvC,CAAtB;AACA,WAAOL,KAAK,CAACM,aAAa,CAACH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,MAAL,KAAgB,CAA3B,CAAD,CAAd,CAAZ;AACD;;AAED,QAAMC,UAAU,GAAGb,OAAO,CAACc,GAAR,CAAaC,MAAD,iBAC7B,QAAC,SAAD;AAAW,IAAA,IAAI,EAAEA,MAAM,CAACb,IAAxB;AAA8B,IAAA,KAAK,EAAEa,MAAM,CAACZ;AAA5C,KAAwDY,MAAM,CAACb,IAA/D;AAAA;AAAA;AAAA;AAAA,UADiB,CAAnB;;AAKF,WAASc,YAAT,GAAwB;AACtB,QAAIC,SAAS,GAAGjB,OAAO,CAACc,GAAR,CACdC,MAAM,IACN;AACE,aAAO,EACP,GAAGA,MADI;AAEPZ,QAAAA,KAAK,EAAEK,WAAW,CAACO,MAAM,CAACZ,KAAR;AAFX,OAAP;AAID,KAPa,CAAhB;AAQEF,IAAAA,UAAU,CAACgB,SAAD,CAAV;AAEH;;AAEC,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,eACGJ,UADH,eAEE;AAAQ,MAAA,OAAO,EAAEG,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA5CQjB,G;;KAAAA,G;AA8CT,eAAeA,GAAf","sourcesContent":["import React,  { useState} from 'react';\nimport './App.css';\nimport './stockView';\nimport StockView from './stockView';\n\n\nfunction App() {\n  //create state that holds ticker data\n  const [tickers, setTickers] = useState([\n    {name: 'GOOG', price: 5.10},\n    {name: 'AAPL', price: 8.53},\n    {name: 'AMZN', price: 10.40},\n    {name: 'TWTR', price: 4.05},\n    {name: 'JPM', price: 3.52},\n   ]);\n\n\n  function round(value) {\n    return Number(Math.round(value+'e'+2)+'e-'+2);\n   }  \n  function changePrice(original){\n    const possiblePrice = [original+0.05*original, original-0.05*original]\n    return round(possiblePrice[Math.floor(Math.random() * 2)])\n  }\n\n  const tickerView = tickers.map((ticker)=> \n    <StockView name={ticker.name} price={ticker.price} key={ticker.name}/>\n  ); \n\n\nfunction buttonChange() {\n  let newPrices = tickers.map(\n    ticker => \n    {\n      return {\n      ...ticker,\n      price: changePrice(ticker.price)\n      }\n    })\n    setTickers(newPrices);\n\n}\n\n  return (\n    <div className=\"App\">\n      {tickerView}\n      <button onClick={buttonChange}>\n      click to refresh price</button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}